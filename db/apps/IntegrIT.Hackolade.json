{"appId":"w:IntegrIT.Hackolade","appShortcutName":"Hackolade","appDisplayName":"Hackolade","authorId":"w:winget","releaseTagName":"winget-8.5.3","downloadUrls":{"1":{"installerType":"WindowsInstallerExe","asset":"","url":"https://s3-eu-west-1.amazonaws.com/hackolade/previous/v8.5.3/Hackolade-win64-setup-signed.exe"},"0":{"installerType":"WindowsInstallerMsi","asset":"","url":""}},"install":{"win32":{"assetId":1,"exec":null,"scope":"Machine","installerArgs":null},"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":null},"displayImages":[],"description":"Polyglot Data Modeling for SQL and NoSQL databases, APIs, and storage formats\n\nHackolade Studio is an intuitive yet powerful application to perform the visually data modeling and schema design of many SQL and NoSQL databases, APIS, and storage formats.\nHackolade Studio combines the graphical representation of collections in an Entity Relationship Diagram, with the graphical representation of the JSON Schema definition of each collection in a hierarchical schema view. Together, these graphical representations provide the schema model for data-at-rest and data-in-motion, plus the documentation of that model. The application is specifically designed around the powerful nature of JSON nested sub-objects and denormalization.\nThe software facilitates the work of, and the dialog between analysts, architects, designers, developers, testers, DBAs, and operators of systems that are based on such technologies. It also can generate schema scripts and documentation in a variety of machine-readable formats (DDLs, JSON Schema, Avro, Parquet, Protobuf, ...) as well as database instances, or human-readable formats such as HTML, Markdown, and PDF reports.\nInstead of having to find data structures tacitly described in the application code, the creation of a database model helps to evaluate design options beforehand, think through the implications of different alternatives, and recognize potential hurdles before committing sizable amounts of development effort. A database model helps plan ahead, in order to minimize later rework. In the end, the modeling process accelerates development, increases quality of the application, and reduces execution risks.\n- ERDVs: added possibility to duplicate an existing ER Diagram View via contextual menu, toolbar, shortcut, or application menu\n- ERD: added warning for generating documentation and printing diagrams with empty names in modeling objects\n- Workgroup: implemented lazy loading of assignable users for pull requests to handle slow networks with timeouts and enhance performance\n- Workgroup: improved error handling when missing Git client on Windows and encountering the \"spawn git ENOENT\" error and directing users to relevant documentation\n- Collibra: improved performance of forward-engineering of large models\n- Collibra: added preliminary check with warning if empty names in modeling objects or out-of-canvas-bounds objects prior to publishing\n- YugabyteDB: added support for column-level check constraints","repo":{"author":"microsoft","repo":"winget-pkgs"},"usrVersion":"8.5.3","version":0,"site":"https://hackolade.com/","source":"Hackolade","license_or_tos":"Proprietary","resources":null,"verified":false}