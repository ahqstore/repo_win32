{"appId":"w:IntegrIT.Hackolade","appShortcutName":"Hackolade","appDisplayName":"Hackolade","authorId":"w:winget","releaseTagName":"winget-8.4.3","downloadUrls":{"1":{"installerType":"WindowsInstallerExe","asset":"","url":"https://s3-eu-west-1.amazonaws.com/hackolade/previous/v8.4.3/Hackolade-win64-setup-signed.exe"},"0":{"installerType":"WindowsInstallerMsi","asset":"","url":""}},"install":{"win32":{"assetId":1,"exec":null,"scope":"Machine","installerArgs":null},"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":null},"displayImages":[],"description":"Polyglot Data Modeling for SQL and NoSQL databases, APIs, and storage formats\n\nHackolade Studio is an intuitive yet powerful application to perform the visually data modeling and schema design of many SQL and NoSQL databases, APIS, and storage formats.\nHackolade Studio combines the graphical representation of collections in an Entity Relationship Diagram, with the graphical representation of the JSON Schema definition of each collection in a hierarchical schema view. Together, these graphical representations provide the schema model for data-at-rest and data-in-motion, plus the documentation of that model. The application is specifically designed around the powerful nature of JSON nested sub-objects and denormalization.\nThe software facilitates the work of, and the dialog between analysts, architects, designers, developers, testers, DBAs, and operators of systems that are based on such technologies. It also can generate schema scripts and documentation in a variety of machine-readable formats (DDLs, JSON Schema, Avro, Parquet, Protobuf, ...) as well as database instances, or human-readable formats such as HTML, Markdown, and PDF reports.\nInstead of having to find data structures tacitly described in the application code, the creation of a database model helps to evaluate design options beforehand, think through the implications of different alternatives, and recognize potential hurdles before committing sizable amounts of development effort. A database model helps plan ahead, in order to minimize later rework. In the end, the modeling process accelerates development, increases quality of the application, and reduces execution risks.\n- Command-Line Interface: added revEng command argument to use index columns in sort criteria for MongoDB reverse-engineering --useIndexInSort=< true | false >\n- Custom props: allowed defaultValue property for non-complex custom properties for all modeling objects in native targets\n- Documentation: improved robustness by ignoring empty custom tabs\n- ERD: created adapter to render visible hidden entities linked to non-existent containers after erroneous user manipulation in Excel\n- Excel: enhanced handling of numeric properties so that cleared numeric values in Excel are emptied in the model during reverse-engineering, if the model is not derived from polyglot\n- Excel: added support for custom properties for view attributes that can have distinct values from their underlying referenced entity attributes\n- PowerDesigner: added reverse-engineering of view technical names\n- PowerDesigner: added mapping of data type timestamptz to \"timestamp with time zone\" when reverse-engineering into PostgreSQL models\n- Views: enabled the creation of Views on existing View attributes that lack underlying reference, by extracting data type from SELECT statement\n- Avro: resolved schema validation about default: null when resolving reference in model derived from polyglot\n- Avro: used technical name of namespace references in schema generation\n- Avro: avoid infinite spinner due to race condition when clicking on controls before schema has been generated\n- EventBridge: enabled extensions on references\n- Snowflake: improved robustness of forward-engineering with view attributes without underlying references\n- Synapse: enabled the selection of a column as both an index column and a distribution column","repo":{"author":"microsoft","repo":"winget-pkgs"},"version":"8.4.3","site":"https://hackolade.com/","source":"Hackolade","license_or_tos":"Proprietary","resources":null,"verified":false}