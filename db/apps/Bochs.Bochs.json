{"appId":"w:Bochs.Bochs","appShortcutName":"Winget Application","appDisplayName":"Bochs","authorId":"w:winget","releaseTagName":"winget-3.0","downloadUrls":{"1":{"installerType":"WindowsInstallerExe","asset":"","url":"https://github.com/bochs-emu/Bochs/releases/download/REL_3_0_FINAL/Bochs-win64-3.0.exe"},"0":{"installerType":"WindowsInstallerMsi","asset":"","url":""}},"install":{"win32":{"assetId":1,"exec":null,"scope":"Machine","installerArgs":null},"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":null},"displayImages":[],"description":"Cross Platform x86 Emulator Project\n\nBochs is a highly portable open source IA-32 (x86) PC emulator written in C++, that runs on most popular platforms. It includes emulation of the Intel x86 CPU, common I/O devices, and a custom BIOS. Bochs can be compiled to emulate many different x86 CPUs, from early 386 to the most recent x86-64 Intel and AMD processors which may even not reached the market yet.\nBochs is capable of running most Operating Systems inside the emulation including Linux, DOS or Microsoft Windows. Bochs was originally written by Kevin Lawton and is currently maintained by this project.\nBochs can be compiled and used in a variety of modes, some which are still in development. The 'typical' use of bochs is to provide complete x86 PC emulation, including the x86 processor, hardware devices, and memory. This allows you to run OS's and software within the emulator on your workstation, much like you have a machine inside of a machine. For instance, let's say your workstation is a Unix/X11 workstation, but you want to run Win'95 applications. Bochs will allow you to run Win 95 and associated software on your Unix/X11 workstation, displaying a window on your workstation, simulating a monitor on a PC.\nBrief summary :\n- Include Bochs debugger support in all release binaries.\n  Bochs internal debugger and Bochs GUI debugger are compiled in by default and\n  there are no special Bochs binaries with internal debugger support anymore.\n- Integrated softfloat3e library replacing older softfloat2a fpu-emulation code\n- Bugfixes for CPU emulation correctness (critical bugfixes for VMX, WAITPKG, LASS,\n  XSAVEC/XSAVES, CPUID and SHA1 ISA implementation)\n- Added emulation of missing AMD 3DNow! instructions\n- Implemented AVX512_FP16 Intel instruction set based on softfloat3e library\n  (enabled in Xeon Sapphire Rapids CPU definition)\n- Implemented MONITORLESS MWAIT instructions support\n- Implemented initial support for AVX10_1 + AVX10_2 ISA extensions and AVX10\n  CPUID leaf 0x24 (AVX10_1 first to be enabled in Xeon Granite Rapids)\n- Implemented AMX-TF32 and AMX-AVX512 ISA extensions\n- Implemented RAO-INT ISA and MSR_IMM ISA extensions\n- CPUID: Added new CPU definitions: for i386, i486DX4, AMD Athlon XP and Intel Core i5 Arrow Lake CPUs\n- CPUID: Support for enabling/disabling of one or more CPU features from CPUID\n  configuration (see \"add_features\" and \"exclude_features\" in bochsrc sample and documentation)\n  ! CPUID: Old bx_generic CPUID model is deprecated with all associated .bochsrc\n  CPUID configuration options, use pre-defined CPU models instead\n- Several fixes and improvements for the Cirrus and Voodoo emulation\n- USB: Added the USB Debugger support for xHCI and UHCI (Windows / GTK3)\n- Added USB boot option (requires i440fx.bin BIOS)\n- LGPL'd VGABIOS updated to version 0.9c (Cirrus / VBE fixes and extensions)\n- Added i440fx.bin BIOS written by Ben Lunt (https://github.com/fysnet/i440fx)\n- Documentation updates and fixes after transition to GIT","repo":{"author":"microsoft","repo":"winget-pkgs"},"version":"3.0","site":"https://bochs.sourceforge.io/","source":"The Bochs Project","license_or_tos":"LGPL-2.1","resources":null,"verified":false}