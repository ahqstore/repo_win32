{"appId":"winget_app_WasmEdge.WasmEdge","appShortcutName":"Winget Application","appDisplayName":"WasmEdge","authorId":"winget","releaseTagName":"winget-0.14.1","downloadUrls":{"0":{"installerType":"WindowsInstallerMsi","asset":"","url":""},"1":{"installerType":"WindowsInstallerMsi","asset":"","url":"https://github.com/WasmEdge/WasmEdge/releases/download/0.14.1/WasmEdge-0.14.1-windows.msi"}},"install":{"win32":{"assetId":1,"exec":null,"scope":"Machine","installerArgs":null},"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":null},"displayImages":[],"description":"WasmEdge is a lightweight, high-performance, and extensible WebAssembly runtime for cloud native, edge, and decentralized applications.\n\n\n0.14.1 (2024-09-16)\nFeatures:\n- Supported LLVM 17.0.6.\n- Bumpped spdlog to v1.13.0.\n- Bumpped fmt to 11.0.2.\n- Bumpped simdjson to v3.10.0.\n- Bumpped googletest to 1.15.2.\n- [WASI-NN] ggml backend:\n    - Bump llama.cpp to b3651.\n    - Static link libggml and libllama.\n    - Refined the CMake to support multiple backends of WASI-NN with ggml backend.\n    - Supported compute single in RPC mode.\n- [WASI-NN] Added support for whisper.cpp backend.\n- [WASI-NN] Added support for piper backend.\n- [WASI-NN] Added support for ChatTTS backend.\n- [WASI-NN] Added support for Burn.rs backend.\n    - Supported squeezenet and whisper models.\n- [Plugin] Supported wasmedge_stablediffusion plug-in.\n    - Enabled CUBLAS.\n    - Enabled metal support on MacOS.\n- [Plugin] Moved wasi_logging into built-in plug-in.\n    - Instead of installing wasi_logging plug-in shared library, developers can find and get this plug-in after calling WasmEdge_PluginLoadWithDefaultPaths() API.\n    - In the WasmEdge CLI tools, the built-in plug-ins will automatically be loaded.\n- [Proposal] Initial support for instantiation phase of component model.\n    - Due to the breaking change of API, bump the plug-in API_VERSION to 3.\n- [Proposal] Supported WASM Relaxed-SIMD proposal.\n    - Added the WasmEdge_Proposal_RelaxSIMD for the configuration in WasmEdge C API.\n    - Users can use the --enable-relaxed-simd to enable the proposal in wasmedge and wasmedgec tools.\nFixed issues:\n- Fixed warnings on GCC-14.\n- Fixed the fmt related header inclusion for error logging.\n- Fixed WASI test error in Windows.\n- Fixed version checking in source tarball.\n- Fixed version detection issue when building from source.\n- Fixed the visibility of internal symbols.\n- [Loader] Fixed alignment checking in loading immediates for memory instructions.\n- [Runtime] Fixed allocation issue when configured the limited memory page size.\n- Used fmt::format instead of string stream in error logging.\nTests:\n- Added WASI test suites on Windows.\nKnown issues:\n- Universal WASM format failed on macOS platforms.\n    - In the current status, the universal WASM format output of the AOT compiler with the O1 or upper optimizations on MacOS platforms will cause a bus error during execution.\n    - We are trying to fix this issue. For a working around, please use the --optimize=0 to set the compiler optimization level to O0 in wasmedgec CLI.\nThank all the contributors who made this release possible!Biswapriyo Nath, Elmira, Faidon Liambotis, Fusaaaann, Han-Wen Tsao, Jun Zhang, Kefu Chai, Lîm Tsú-thuàn, Michael Morris, PeterD1524, Shen-Ta Hsieh, Shreyas Atre, Sylveon, Yi Huang, Yi-Ying He, alabulei1, dm4, grorge, hydai, junxiangMu, vincentIf you want to build from source, please use WasmEdge-0.14.1-src.tar.gz instead of the zip or tarball provided by GitHub directly.","repo":{"author":"microsoft","repo":"winget-pkgs"},"version":"0.14.1","site":"https://github.com/WasmEdge/WasmEdge","source":"WasmEdge","license_or_tos":"Apache-2.0","resources":null,"verified":false}