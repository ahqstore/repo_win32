{"appId":"w:BaldurKarlsson.RenderDoc","appShortcutName":"RenderDoc","appDisplayName":"RenderDoc","authorId":"w:winget","releaseTagName":"winget-1.40.0","downloadUrls":{"0":{"installerType":"WindowsInstallerMsi","asset":"","url":""},"1":{"installerType":"WindowsInstallerMsi","asset":"","url":"https://renderdoc.org/stable/1.40/RenderDoc_1.40_64.msi"}},"install":{"win32":{"assetId":1,"exec":null,"scope":"Machine","installerArgs":null},"winarm":null,"linux":null,"linuxArm64":null,"linuxArm7":null,"android":null},"displayImages":[],"description":"A stand-alone graphics debugging tool\n\nRenderDoc is a free MIT licensed stand-alone graphics debugger that allows quick and easy single-frame capture and detailed introspection of any application using Vulkan, D3D11, OpenGL & OpenGL ES or D3D12 across Windows, Linux, Android, or Nintendo Switchâ„¢.\nThis release adds support for some new Vulkan extensions, including VK_EXT_descriptor_buffer, as well as Vulkan 1.4. It contains some other quality of life improvements and the usual bug fixes. NOTE: currently AMD's official drivers contain a bug that will likely cause any captures using VK_EXT_descriptor_buffer to fail. This can't be worked around on RenderDoc's side and requires a driver fix.\nAs an update to previous releases, note that the latest nvidia drivers now support raytracing pipeline capture and replay so will function in RenderDoc.\nAs always binary builds with installers, zips and tarballs are available on renderdoc.org.\nPython API changes\n- ShaderDirectAccess.category has been changed to ShaderDirectAccess.type which is a DescriptorType. The category if needed can be determined via CategoryForDescriptorType.\n- VKDescriptorSet.descriptorSetResourceId may be unset now if a capture is using descriptor buffers.\nFeatures/Improvements\n- All: Fix compilation of application API header with pedantic C mode.\n- UI: Added the ability to cancel a download in progress.\n- UI: Display an explicit note for resource usage when the resource is not tracked, rather than showing an empty panel.\n- D3D: More clearly display read-only DSVs in the pipeline state.\n- D3D12: Root signature viewer shows space + register for root parameters.\n- Vulkan: Add support for NonSemantic.DebugBreak as a breakpoint, however on most current drivers this instruction causes an unconditional GPU crash so is not useful for debugging.\n- Vulkan: Add support for core version 1.4 and the following extensions:\n  - VK_EXT_descriptor_buffer\n  - VK_KHR_surface_maintenance1\n  - VK_KHR_swapchain_maintenance1\n  - VK_EXT_host_image_copy\n  - VK_KHR_map_memory2\n  - VK_KHR_shader_bfloat16\n  - VK_KHR_unified_image_layouts\n  - VK_EXT/KHR_present_mode_fifo_latest_ready\n  - VK_KHR_present_id/wait2\n  - VK_KHR_maintenance6 to VK_KHR_maintenance9\n  - VK_EXT_pipeline_robustness\n  - VK_EXT_pipeline_protected_access\nBugfixes\n- UI: Fix a potential rare crash while closing a capture.\n- UI: Fix a hang when editing some shaders with complex #include trees.\n- UI: Fix a problem where raw binary buffer exports would be truncated wrongly when exporting from a large offset into a buffer.\n- Python: Fix a bug when creating a CaptureViewer implementation in python where only some methods are overridden.\n- Linux: Follow symlinks when loading python extension folders.\n- Android: Fix a potential race condition during applications that start very quickly.\n- D3D: Fix a potential crash when debugging DXBC shaders that use groupshared memory with arrays of large stride.\n- D3D: Fix an error debugging a pixel shader if it contains inputs which are not written by the vertex shader.\n- D3D11: Fix handling of zero-sized constant buffer bindings not being correctly truncated to have no data.\n- D3D11: Fix a crash when calling Unmap() a buffer in a captured frame when the Map() happened in a previous frame.\n- D3D12: Fix a crash when processing callstacks that refer to namespaces.\n- D3D12: Fix root constant updates inside a ExecuteIndirect not properly inheriting values from previous updates before the ExecuteIndirect.\n- D3D12: Fix a potential GPU crash when selecting a draw in an ExecuteIndirect that updates root constants and uses bindless resources.\n- D3D12: Ensure pixel history shows the proper blended results for multiple fragments per pixel in the same draw when displaying the Tex After\n- D3D12: Fix a potential crash if ExecuteIndirect is called with MaxCommandCount == 0.\n- D3D12: Fix a GPU crash if an ExecuteIndirect's argument buffer fails to patch when using a count buffer.\n- D3D12: Fix wrong results being displayed for bindless usage on sub-draws in an ExecuteIndirect after the first.\n- D3D12: Fix a crash on load when ExecuteIndirect is run on a compute command buffer.\n- Vulkan: Fix a potential crash if a descriptor array is accessed out-of-bounds by a shader.\n- Vulkan: Fix a potential rare crash with window display.\n- Vulkan: Add a missing sample shading feature check for internal shader creation.\n- Vulkan: Fix detection of scalar block layout where it is only necessary due to misalignment of vectors in a structure array.\n- Vulkan: Add workaround for nvidia driver bug with capture/replay of BDA buffers.\n- Vulkan: Fix a crash when editing SPIR-V that doesn't declare types early enough for certain integers.\n- Vulkan: Fix a crash fetching mesh output data on Vulkan devices that support only a small number of buffers.\n- Vulkan: Disable reporting of extensions like VK_EXT_fragment_density_map2 if their dependency parent extension is not reported.\n- Vulkan: Fix a potential crash when displaying mesh output data if the index buffer is read out of bounds.\n- GL: Treat zink as a different platform for the purpose of vendor checks.\n- GLES: Fix handling of emulated image copies with formats that are not color renderable.\n- GLES: Fix handling of emulated image copies for D16 images.","repo":{"author":"microsoft","repo":"winget-pkgs"},"version":"1.40.0","site":"https://renderdoc.org/","source":"Baldur Karlsson","license_or_tos":"MIT","resources":null,"verified":false}